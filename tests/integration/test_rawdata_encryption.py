import os
import tempfile
from fastapi.testclient import TestClient

os.environ["DATABASE_URL"] = "sqlite:///" + tempfile.mktemp(suffix=".db")
os.environ["DATA_ENCRYPTION_KEY"] = "test_secret"

from backend.app.main import app
from backend.app.database import Base, engine, SessionLocal
from backend.app import models, crypto

Base.metadata.create_all(bind=engine)
client = TestClient(app)


def setup_dependencies():
    db = SessionLocal()
    scenario = models.Scenario(name="s", description="d")
    db.add(scenario)
    db.commit()
    db.refresh(scenario)
    scen_data = models.ScenarioData(idScenario=scenario.id)
    db.add(scen_data)
    db.commit()
    db.refresh(scen_data)
    field_type = db.query(models.FieldType).first()
    db.close()
    return scen_data.id, field_type.id


def login():
    resp = client.post("/token", data={"username": "admin", "password": "admin"})
    assert resp.status_code == 200
    return resp.json()["access_token"]


def test_rawdata_values_encrypted():
    scen_data_id, field_type_id = setup_dependencies()
    token = login()
    payload = {
        "id": 0,
        "fieldTypeId": field_type_id,
        "fieldName": "secret",
        "fieldValue": "myvalue",
        "autoGenerated": False,
        "scenarioDataId": scen_data_id,
        "length": None,
        "status": True,
    }
    resp = client.post("/rawdata/", json=payload, headers={"Authorization": f"Bearer {token}"})
    assert resp.status_code == 200
    data = resp.json()
    assert data["fieldValue"] == "myvalue"
    db = SessionLocal()
    obj = db.query(models.RawData).filter_by(id=data["id"]).first()
    db.close()
    assert obj.fieldValue != "myvalue"
    assert crypto.decrypt(obj.fieldValue) == "myvalue"
